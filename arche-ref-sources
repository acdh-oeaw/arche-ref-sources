#!/usr/bin/php
<?php

/*
 * The MIT License
 *
 * Copyright 2021 Austrian Centre for Digital Humanities.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

use zozlak\argparse\ArgumentParser as AP;
use quickRdf\DataFactory as DF;
use quickRdf\Dataset;
use quickRdfIo\Util as ioUtil;
use rdfInterface2easyRdf\AsRdfInterface;
use rdfHelpers\DatasetNode;
use acdhOeaw\UriNormalizer;
use acdhOeaw\UriNormRules;
use acdhOeaw\UriNormalizerRule;
use acdhOeaw\UriNormalizerCache;
use acdhOeaw\UriNormalizerException;
use acdhOeaw\arche\lib\Repo;
use acdhOeaw\arche\refSources\NamedEntityIteratorFile;
use acdhOeaw\arche\refSources\NamedEntityIteratorRepo;
use acdhOeaw\arche\refSources\NamedEntityIteratorInterface;
use acdhOeaw\arche\refSources\PropertyMappings;
use acdhOeaw\arche\refSources\RefSourcesException;

if (file_exists(__DIR__ . '/../../autoload.php')) {
    require_once __DIR__ . '/../../autoload.php';
} else {
    require_once __DIR__ . '/vendor/autoload.php';
}

const MODE_RESOLVE = 1;
const MODE_PARSE = 2;
const MODE_TEST = 3;
const MODE_UPDATE = 4;

$modes       = [
    'resolve' => MODE_RESOLVE,
    'parse'   => MODE_PARSE,
    'test'    => MODE_TEST,
    'update'  => MODE_UPDATE,
];
$parser      = new AP(epilog: "Enriches metadata by fetching additional information from external reference sources (GND, geonames, etc.)\nWhich resource classes are processed, which external reference sources are used and which properties are fetched from them is driven by the configuration file.");
$parser->addArgument('--limit', type: AP::TYPE_INT, default: PHP_INT_MAX, help: 'limit number of processed resources');
$parser->addArgument('--after', help: 'process only resources modified after a given date');
$parser->addArgument('--id', help: 'process only resource with a given id');
$parser->addArgument('--extDbName', help: 'process only resource from a given external authority file');
$parser->addArgument('--repoUrl', help: 'use a given repository instance (overwrites the `repositoryUrl` property read from the config file)');
$parser->addArgument('--inputFile', help: 'read resources from a given RDF file instead of the ARCHE repository');
$parser->addArgument('--user', help: 'user name used for repository authentication (not important if --test or --resolveOnly are used)');
$parser->addArgument('--pswd', help: 'password used for repository authentication (not important if --test or --resolveOnly are used)');
$parser->addArgument('--mode', default: 'parse', choices: array_keys($modes), help: "operation mode\n    - resolve - only try to resolve the external URI (finds broken external URIs)\n    - parse [default] - resolve the external URI and parse the output (when used with --verbose and/or --output it allows to inspect the data provided by the external source and test the metadata mapping defined in the configuration file)\n    - test - tries to update the repository resource with data fetched from the external source (so doorkeeper checks are performed) but rolls back the update no matter if it was successful or not\n    - update - updates the repository resource with data fetched from the external source\n");
$parser->addArgument('--verbose', action: AP::ACTION_STORE_TRUE, help: 'provide more verbose output, especially print the data fetched from the external reference source');
$parser->addArgument('--output', help: "when used, the data to be saved to the repository is also saved in a TTL file (the output isn't created in mode=resolve)");
$parser->addArgument('cfgFile', help: 'path to the configuration file');
$param       = $parser->parseArgs();
$param->mode = $modes[$param->mode];
if (!file_exists($param->cfgFile)) {
    exit("Configuration file " . $param->cfgFile . " doesn't exist\n");
}

// Configuration initialization
$cfg        = json_decode(json_encode(yaml_parse_file($param->cfgFile)));
$guzzleOpts = [
    'auth' => [
        $param->user ?? $cfg->auth->user ?? '',
        $param->pswd ?? $cfg->auth->password ?? '',
    ],
];
$dateFilter = !empty($param->after) ? $param->after : null;

// Helper objects initialization
$repo       = Repo::factoryFromUrl($param->repositoryUrl ?? $cfg->repositoryUrl ?? die("ARCHE repository URL unknown"), $guzzleOpts);
$idProp     = $repo->getSchema()->id;
$idPropNN   = DF::namedNode($idProp);
$cache      = new UriNormalizerCache();
$normRules  = UriNormRules::getRules();
$normalizer = new UriNormalizer($normRules);

/* @var $source NamedEntityIteratorInterface */
if (!empty($param->inputFile)) {
    $source = new NamedEntityIteratorFile($param->inputFile, $repo);
} else {
    $source = new NamedEntityIteratorRepo($repo);
}

// Fetch the data from external sources
if (!empty($param->output) && $param->mode >= MODE_PARSE) {
    $nmsp = new quickRdf\RdfNamespace();
    foreach ($cfg->namespaces ?? [] as $alias => $prefix) {
        $nmsp->add($prefix, $alias);
    }
    $output = fopen($param->output, 'w');
}

$mappings = new PropertyMappings($normalizer, $idPropNN);
foreach ($cfg->referenceSources as $extDbName => $extDbCfg) {
    $rule = array_filter($normRules, fn($x) => $x->name === $extDbName);
    if (count($rule) === 0) {
        die("No normalization rules found for the '$extDbName' external reference database\n");
    }
    $rule = UriNormalizerRule::factory(reset($rule));
    $mappings->addExternalDatabase($extDbName, $rule);
    foreach ($extDbCfg as $class => $cCfg) {
        $mappings->addExternalDatabaseClass($extDbName, $class, $cCfg);
    }
}

$processed = [];
$idFilter  = "^" . $param->id . "$";
foreach ($cfg->referenceSources as $extDbName => $extDbCfg) {
    if (!empty($param->extDbName) && $extDbName !== $param->extDbName) {
        continue;
    }
    echo "\n### Processing resources from $extDbName\n";

    if (empty($param->id)) {
        $idFilter = $mappings->getRule($extDbName)->match;
    }
    $source->setFilter(null, $idFilter, $dateFilter, $param->limit);

    $N = 1;
    foreach ($source->getNamedEntities() as $entity) {
        /* @var NamedEntityInterface $entity */
        $NT = $source->getCount();
        $NN = round(100 * $N / $NT);
        echo "  " . $entity->getUri() . " ($N/$NT $NN%)\n";
        $N++;

        $entityUri = $entity->getUri();
        if (isset($processed[$entityUri])) {
            continue;
        }
        $processed[$entity->getUri()] = 1;

        // collect data from all external databases reachable from this entity
        $entityExtMeta = [];
        $idsToProcess  = $entity->getIdentifiers($normalizer);
        $idsProcessed  = [];
        while (count($idsToProcess) > 0) {
            try {
                $id                = array_pop($idsToProcess);
                $idsProcessed[$id] = 1;
                // don't even try to resolve identifiers for which there's no mapping
                $mappings->matchExternalDatabase($id);
                echo "    fetching data for $id\n";
                $meta              = AsRdfInterface::addDatasetNode($normalizer->fetch($id), new DF(), fn($x) => new DatasetNode(new Dataset(), $x));
                $uriStr            = $meta->getNode()->getValue();
                $extDbName         = $mappings->matchExternalDatabase($uriStr);
                if (!isset($entityExtMeta[$extDbName])) {
                    $entityExtMeta[$extDbName] = [];
                } if (!isset($entityExtMeta[$extDbName][$uriStr])) {
                    $entityExtMeta[$extDbName][$uriStr] = $meta;
                    foreach ($mappings->mapIdentifiers($meta, $extDbName) as $i) {
                        if (!isset($idsProcessed[$i]) && !in_array($i, $idsToProcess)) {
                            $idsToProcess[] = $i;
                        }
                    }
                }
            } catch (RefSourcesException | UriNormalizerException $e) {
                echo $param->verbose ? "      unsupported source: " . $e->getMessage() . "\n" : '';
            }
        }
        if ($param->mode < MODE_RESOLVE) {
            continue;
        }

        // update entiti's metadata
        $entityMeta     = $entity->getMetadata();
        $entityMetaOrig = $entityMeta->getDataset()->copy();
        foreach ($entityExtMeta as $extDbName => $extDbMetas) {
            foreach ($extDbMetas as $extDbMeta) {
                try {
                    $mappings->resolveAndMerge($extDbName, $entityMeta, $extDbMeta);
                } catch (RefSourcesException $e) {
                    echo $param->verbose ? "      " . $e->getMessage() . "\n" : '';
                }
            }
        }

        $newData = $entityMeta->getDataset()->copyExcept($entityMetaOrig);
        echo $param->verbose ? "    fetched data: \n      " . trim(str_replace("\n", "\n      ", (string) $newData)) . "\n" : '';

        // save entity's metadata
        if ($param->mode >= MODE_TEST && count($newData) > 0) {
            echo "  updating ARCHE resource " . ($param->mode === MODE_TEST ? '(test)' : '') . "\n";
            try {
                $merged = $entity->updateMetadata($entityMeta, $param->mode === MODE_TEST);
                foreach ($merged as $i) {
                    $processed[$i] = 1;
                }
                $merged = count($merged) > 0 ? '(merged with: ' . implode(', ', $merged) . ')' : '';
                echo "    succeeded $merged\n";
            } catch (\Exception $e) {
                echo "    failed with: " . ($param->verbose ? print_r($e, true) : $e->getMessage()) . "\n";
            }
        }
        if (isset($output)) {
            ioUtil::serialize($entityMeta, 'text/turtle', $output, $nmsp);
        }
    }
}
if (isset($output)) {
    fclose($output);
}