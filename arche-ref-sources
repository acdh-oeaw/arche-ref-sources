#!/usr/bin/php
<?php

/*
 * The MIT License
 *
 * Copyright 2021 Austrian Centre for Digital Humanities.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#use RuntimeException;

use acdhOeaw\arche\lib\Repo;
use acdhOeaw\arche\lib\SearchTerm;
use acdhOeaw\arche\lib\SearchConfig;
use acdhOeaw\arche\lib\RepoResource;
use acdhOeaw\arche\lib\RepoResourceInterface;
use zozlak\RdfConstants as RDF;
use GuzzleHttp\Client;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Exception\ClientException;
use EasyRdf\Graph;
use EasyRdf\Resource;
use EasyRdf\Literal;
use acdhOeaw\UriNormalizer;

require_once __DIR__ . '/vendor/autoload.php';

const MODE_RESOLVE = 1;
const MODE_PARSE = 2;
const MODE_TEST = 3;
const MODE_UPDATE = 4;

$modes = [
    'resolve' => MODE_RESOLVE,
    'parse'   => MODE_PARSE,
    'test'    => MODE_TEST,
    'update'  => MODE_UPDATE,
];

// Parameters parsing
$param = [
    'help'    => false,
    'limit'   => PHP_INT_MAX,
    'mode'    => 'parse',
    'user'    => '',
    'pswd'    => '',
    'repoUrl' => '',
    'verbose' => false,
    'after'   => '',
    'id'      => '',
    'output'  => '',
    0         => 'config.yaml',
];
$n     = 0;
for ($i = 1; $i < count($argv); $i++) {
    $v = $argv[$i];
    $p = str_starts_with($v, '--');
    $v = $p ? substr($v, 2) : $v;
    if ($p && !isset($param[$v]) || $v === 'help' || !$p && !isset($param[$n])) {
        if ($v !== 'help') {
            echo "Unknonwn parameter " . ($p ? $v : $n) . "\n";
        }
        $param['help'] = true;
        break;
    }
    if ($p) {
        if (is_bool($param[$v])) {
            $param[$v] = true;
        } else {
            $param[$v] = $argv[$i + 1];
            $i++;
        }
    } else {
        $param[$n] = $v;
        $n++;
    }
}
if ($param['help']) {
    echo "\n" . $argv[0] . " [--help] [--limit N] [--after date] [--id uri] [--repoUrl repoApiBaseUrl] [--user archeUser] [--pswd archePassword] [--mode resolve/parse/test/update] [--verbose] [--output pathToOutputFile] cfgFilePath\n";
    echo "\n";
    echo "Enriches metadata by fetching additional information from external reference sources (GND, geonames, etc.)\n";
    echo "Which resource classes are processed, which external reference sources are used and which properties are fetched from them is driven by the configuration file.\n";
    echo "\n";
    echo "--limit N - limit number of processed resources\n";
    echo "--after date - process only resources modified after a given date\n";
    echo "--id uri - process only repository resource with a given id\n";
    echo "--repoUrl - use a given repository instance (overwrites the `repositoryUrl` property read from the config file)\n";
    echo "--user archeUser - user name used for repository authentication (not important if --test or --resolveOnly are used)\n";
    echo "--pswd archePassword - password used for repository authentication (not important if --test or --resolveOnly are used)\n";
    echo "--mode resolve/parse/test/update - operation mode\n";
    echo "    - resolve - only try to resolve the external URI (finds broken external URIs)\n";
    echo "    - parse [default] - resolve the external URI and parse the output (when used with --verbose and/or --output it allows to inspect the data provided by the external source and test the metadata mapping defined in the configuration file)\n";
    echo "    - test - tries to update the repository resource with data fetched from the external source (so doorkeeper checks are performed) but rolls back the update no matter if it was successful or not\n";
    echo "    - update - updates the repository resource with data fetched from the external source\n";
    echo "--verbose - provide more verbose output, especially print the data fetched from the external reference source\n";
    echo "--output pathToOutputFile - when used, the data to be saved to the repository are also saved in a TTL file\n";
    echo "cfgFilePath - path to the configuration file\n";
    echo "\n";
    exit();
}
$param['mode'] = $modes[$param['mode']] ?? MODE_PARSE;
if (!file_exists($param[0])) {
    exit("Configuration file $param[0] doesn't exist\n");
}

// Configuration initialization
$cfg       = json_decode(json_encode(yaml_parse_file($param[0])));
$cfg->auth = $cfg->auth ?? new stdClass();
if (!empty($param['user']) || !isset($cfg->auth->user)) {
    $cfg->auth->user = $param['user'];
}
if (!empty($param['pswd']) || !isset($cfg->auth->password)) {
    $cfg->auth->password = $param['pswd'];
}
if (!empty($param['repoUrl']) || !isset($cfg->repositoryUrl)) {
    $cfg->repositoryUrl = $param['repoUrl'];
}

// Helper objects initialization
$client      = new Client([
    'http_errors'     => false,
    'allow_redirects' => ['track_redirects' => true],
    ]);
$opts        = [
    'auth' => [$cfg->auth->user, $cfg->auth->password],
];
$repo        = Repo::factoryFromUrl($cfg->repositoryUrl, $opts);
$schema      = $repo->getSchema();
$normalizer  = UriNormalizer::factory();
$outputGraph = new Graph();

// Do the job
foreach ($cfg->classes as $class => $cCfg) {
    echo "### Processing resources of class $class\n\n";
    foreach ($cCfg as $mCfg) {
        $st   = [];
        $st[] = new SearchTerm(RDF::RDF_TYPE, $class);
        if (!empty($param['id'])) {
            $st[] = new SearchTerm($schema->id, $param['id']);
        } else {
            $st[] = new SearchTerm($schema->id, $mCfg->match, '~');
        }
        if (!empty($param['after'])) {
            $st[] = new SearchTerm($schema->modificationDate, $param['after'], '>=', SearchTerm::TYPE_DATETIME);
        }
        $sc               = new SearchConfig();
        $sc->limit        = $param['limit'];
        $sc->metadataMode = RepoResourceInterface::META_RESOURCE;
        foreach ($repo->getResourcesBySearchTerms($st, $sc) as $N => $repoRes) {
            $N  = $N + 1;
            $NN = round(100 * $N / $sc->count);
            echo "Resource " . $repoRes->getUri() . " ($N/$sc->count $NN%)\n";

            $meta      = $repoRes->getGraph();
            $newValues = [];
            foreach ($meta->allResources($schema->id) as $id) {
                $id = (string) $id;
                if (!preg_match("`$mCfg->match`", $id)) {
                    continue;
                }
                $url      = str_replace('%id%', $id, $mCfg->resolve);
                $response = $client->send(new Request('get', $url));
                if ($response->getStatusCode() !== 200) {
                    echo "ERROR: Failed to load data from $url\n";
                    continue;
                }
                $graph   = new Graph();
                $graph->parse((string) $response->getBody(), $mCfg->format);
                $refMeta = $graph->resource($id);

                // if there were redirects try to adjust the id based on redirect URLs
                if (count($refMeta->propertyUris()) === 0) {
                    $redirectUrl = $response->getHeader('X-Guzzle-Redirect-History');
                    $redirectUrl = array_pop($redirectUrl);
                    $matchRegex  = "`" . str_replace('%id%', '(.*)', $mCfg->resolve) . "`";
                    $matches     = null;
                    preg_match($matchRegex, $redirectUrl, $matches);
                    if (count($matches) >= 2) {
                        $refMeta = $graph->resource($matches[1]);
                    }
                }

                if (count($refMeta->propertyUris()) === 0) {
                    echo "ERROR: Data fetched from $url doesn't contain the $id resource\n";
                    continue;
                }
                if ($param['mode'] <= MODE_RESOLVE) {
                    continue;
                }

                foreach ($mCfg->mapping as $pCfg) {
                    if (!isset($newValues[$pCfg->property])) {
                        $newValues[$pCfg->property] = [];
                    }
                    $values = resolve($refMeta, $pCfg->path);
                    $values = filter($values, $pCfg->match ?? null, $pCfg->skip ?? null);
                    foreach ($values as $i) {
                        $lang = '_';
                        switch ($pCfg->type) {
                            case 'id':
                                $i    = $normalizer->normalize((string) $i);
                                break;
                            case 'literal':
                                $lang = $pCfg->lang ?? (string) ($i instanceof Literal ? $i->getLang() : '');
                                break;
                            case 'resource':
                                break;
                            default:
                                throw new RuntimeException("Unknown property type $pCfg->type");
                        }
                        if (!isset($newValues[$pCfg->property][$lang])) {
                            $newValues[$pCfg->property][$lang] = [];
                        }
                        $maxCountCond = count($newValues[$pCfg->property][$lang]) < ($pCfg->maxPerLang ?? PHP_INT_MAX);
                        $langReqCond  = !empty($lang) || !($pCfg->langRequired ?? false);
                        if ($maxCountCond && $langReqCond) {
                            $newValues[$pCfg->property][$lang][] = (string) $i;
                        }
                    }
                }
            }
            if ($param['mode'] <= MODE_RESOLVE) {
                continue;
            }

            $newMeta = (new Graph())->resource($repoRes->getUri());
            foreach ($newValues as $prop => $langs) {
                foreach ($langs as $lang => $values) {
                    foreach ($values as $n => $value) {
                        if ($lang === '_') {
                            $newMeta->addResource($prop, $value);
                        } else {
                            $newMeta->addLiteral($prop, $value, empty($lang) ? null : $lang);
                        }
                    }
                }
            }
            echo $param['verbose'] ? $newMeta->dump('text') : '';
            if (!empty($param['output'])) {
                $newMeta->copy([], '/^$/', '', $outputGraph);
            }
            if ($param['mode'] <= MODE_PARSE) {
                continue;
            }
            try {
                $repo->begin();
                $repoRes->setMetadata($newMeta);
                $repoRes->updateMetadata(RepoResource::UPDATE_MERGE);
                if ($param['mode'] <= MODE_TEST) {
                    $repo->rollback();
                } else {
                    $repo->commit();
                }
            } catch (ClientException $ex) {
                echo "ERROR: " . (string) $ex->getResponse()->getBody() . "\n";
            }
        }
    }
}
if (!empty($param['output'])) {
    file_put_contents($param['output'], $outputGraph->serialise('text/turtle'));
}

function resolve(Resource $meta, array $path): array {
    if (count($path) < 2) {
        return $meta->all($path[0]);
    }
    $prop   = array_shift($path);
    $values = [];
    foreach ($meta->allResources($prop) as $res) {
        $values = array_merge($values, resolve($res, $path));
    }
    return $values;
}

function filter(array $values, ?string $match, ?string $skip): array {
    if (empty($match) && empty($skip)) {
        return $values;
    }
    $filtered = [];
    $skip     = empty($skip) ? '^$' : $skip;
    foreach ($values as $i) {
        if (preg_match("`$match`", (string) $i) && !preg_match("`$skip`", (string) $i)) {
            $filtered[] = $i;
        }
    }
    return $filtered;
}
