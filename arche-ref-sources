#!/usr/bin/php
<?php

/*
 * The MIT License
 *
 * Copyright 2021 Austrian Centre for Digital Humanities.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

use zozlak\argparse\ArgumentParser as AP;
use GuzzleHttp\Exception\ClientException;
use quickRdf\Dataset;
use quickRdf\DataFactory as DF;
use quickRdfIo\Util as ioUtil;
use acdhOeaw\UriNormalizer;
use acdhOeaw\UriNormRules;
use acdhOeaw\UriNormalizerRule;
use acdhOeaw\UriNormalizerCache;
use acdhOeaw\arche\lib\Repo;
use acdhOeaw\arche\refSources\NamedEntityIteratorFile;
use acdhOeaw\arche\refSources\NamedEntityIteratorRepo;
use acdhOeaw\arche\refSources\NamedEntityIteratorInterface;
use acdhOeaw\arche\refSources\NamedEntityInterface;
use acdhOeaw\arche\refSources\Util;
use acdhOeaw\arche\refSources\PropertyMapping;

if (file_exists(__DIR__ . '/../../autoload.php')) {
    require_once __DIR__ . '/../../autoload.php';
} else {
    require_once __DIR__ . '/vendor/autoload.php';
}

const MODE_RESOLVE = 1;
const MODE_PARSE = 2;
const MODE_TEST = 3;
const MODE_UPDATE = 4;

$modes       = [
    'resolve' => MODE_RESOLVE,
    'parse'   => MODE_PARSE,
    'test'    => MODE_TEST,
    'update'  => MODE_UPDATE,
];
$parser      = new AP("Enriches metadata by fetching additional information from external reference sources (GND, geonames, etc.)\nWhich resource classes are processed, which external reference sources are used and which properties are fetched from them is driven by the configuration file.");
$parser->addArgument('--limit', type: AP::TYPE_INT, default: PHP_INT_MAX, help: 'limit number of processed resources');
$parser->addArgument('--after', help: 'process only resources modified after a given date');
$parser->addArgument('--id', help: 'process only repository resource with a given id');
$parser->addArgument('--repoUrl', help: 'use a given repository instance (overwrites the `repositoryUrl` property read from the config file)');
$parser->addArgument('--inputFile', help: 'read resources from a given RDF file instead of the ARCHE repository');
$parser->addArgument('--user', help: 'user name used for repository authentication (not important if --test or --resolveOnly are used)');
$parser->addArgument('--pswd', help: 'password used for repository authentication (not important if --test or --resolveOnly are used)');
$parser->addArgument('--mode', default: 'parse', choices: array_keys($modes), help: "operation mode\n    - resolve - only try to resolve the external URI (finds broken external URIs)\n    - parse [default] - resolve the external URI and parse the output (when used with --verbose and/or --output it allows to inspect the data provided by the external source and test the metadata mapping defined in the configuration file)\n    - test - tries to update the repository resource with data fetched from the external source (so doorkeeper checks are performed) but rolls back the update no matter if it was successful or not\n    - update - updates the repository resource with data fetched from the external source\n");
$parser->addArgument('--verbose', action: AP::ACTION_STORE_TRUE, help: 'provide more verbose output, especially print the data fetched from the external reference source');
$parser->addArgument('--output', help: 'when used, the data to be saved to the repository are also saved in a TTL file');
$parser->addArgument('cfgFile', help: 'path to the configuration file');
$param       = $parser->parseArgs();
$param->mode = $modes[$param->mode];
if (!file_exists($param->cfgFile)) {
    exit("Configuration file " . $param->cfgFile . " doesn't exist\n");
}

// Configuration initialization
$cfg        = json_decode(json_encode(yaml_parse_file($param->cfgFile)));
$guzzleOpts = [
    'auth' => [
        $param->user ?? $cfg->auth->user ?? '',
        $param->pswd ?? $cfg->auth->password ?? '',
    ],
];
$dateFilter = !empty($param->after) ? $param->after : null;

// Helper objects initialization
$repo       = Repo::factoryFromUrl($param->repositoryUrl ?? $cfg->repositoryUrl ?? die("ARCHE repository URL unknown"), $guzzleOpts);
$cache      = new UriNormalizerCache();
$rules      = UriNormRules::getRules();
$normalizer = new UriNormalizer($rules, cache: $cache);
/* @var $source NamedEntityIteratorInterface */
if (!empty($param->inputFile)) {
    $source = new NamedEntityIteratorFile($param->inputFile, $repo);
} else {
    $source = new NamedEntityIteratorRepo($repo);
}
if (!empty($param->id)) {
    $param->id = $normalizer->normalize($param->id);
}

// Fetch the data from external sources
$outputMeta = new Dataset(false);
foreach ($cfg->classes as $class => $cCfg) {
    echo "\n### Processing resources of class $class\n\n";

    //TODO - first resources should be collected,
    //     - then all namespaces should be processed for a given resource
    //     - then update should be performed
    foreach ($cCfg as $namespace => $mappings) {
        echo "\n  ### Processing resources in the $namespace namespace\n\n";

        $normRule = array_filter($rules, fn($x) => $x->name === $namespace);
        $normRule = array_pop($normRule) ?? die("Normalization rules unknown for the $namespace namespace");
        $normRule = UriNormalizerRule::factory($normRule);
        $db       = new UriNormalizer([$normRule], cache: $cache);
        $idFilter = !empty($param->id) ? "^" . $param->id . "$" : $normRule->match;
        $source->setFilter($class, $idFilter, $dateFilter, $param->limit);

        $mappings = PropertyMapping::fromConfig($mappings);

        foreach ($source->getNamedEntities() as $N => $namedEntity) {
            /* @var $namedEntity NamedEntityInterface */
            $N              = $N + 1;
            $T              = $source->getCount();
            $NN             = round(100 * $N / $T);
            $namedEntityUri = DF::namedNode($namedEntity->getUri());
            echo "    Resource $namedEntityUri ($N/$T $NN%)\n";

            $ids = $namedEntity->getIdentifiers($normRule->match, $db);
            if (count($ids) === 0) {
                echo "      WARNING: no matching identifiers\n";
                continue;
            }

            $newMeta = new Dataset(false);
            foreach ($ids as $id) {
                try {
                    $dbMeta = $db->fetch($id);
                } catch (Throwable $e) {
                    echo "      ERROR: Failed to load data from $id with error: " . $e->getMessage() . "\n";
                    continue;
                }
                if ($param->mode <= MODE_RESOLVE) {
                    continue;
                }

                foreach ($mappings as $pCfg) {
                    /* @var $pCfg PropertyMapping */
                    $pCfg->merge($newMeta, $dbMeta, $namedEntityUri, $normalizer);
                }
            }
            if (!empty($param->output)) {
                $outputMeta->add($newMeta);
            }
            if ($param->mode <= MODE_PARSE) {
                continue;
            }
            // ARCHE update goes here
            try {
                $namedEntity->updateMetadata(Util::asEasyRdfResource($newMeta, $namedEntity->getUri()), $param->mode <= MODE_TEST);
                echo $param->verbose ? "      INFO: updated successfully\n" : "";
            } catch (ClientException $ex) {
                echo "      ERROR: " . (string) $ex->getResponse()->getBody() . "\n";
            }
        }
    }
}
echo $param->verbose ? "\n### Collected metadata:\n\n$outputMeta\n" : '';
if (!empty($param->output)) {
    echo "\n### Writing collected metadata to $param->output\n";
    $nmsp = new quickRdf\RdfNamespace();
    foreach ($cfg->namespaces ?? [] as $alias => $prefix) {
        $nmsp->add($prefix, $alias);
    }
    ioUtil::serialize($outputMeta, 'text/turtle', $param->output, $nmsp);
}
